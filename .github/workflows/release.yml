# This is a basic workflow to help you get started with Actions

name: deploy-on-branch-created

# Controls when the workflow will run
on:
  create:
    branches:
      - 'release/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify branch name
        id: verify_branch
        run: |
          GITHUB_REF=${{ github.ref }}
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          if [[ ! "$BRANCH_NAME" =~ ^release/ ]]; then
            echo "Branch name is $BRANCH_NAME and does not match pattern. Exiting."
            exit 1
          else
            VERSION_NAME=${BRANCH_NAME#release/}
            echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV
            echo "Branch name is $BRANCH_NAME and matches pattern. Continuing."
          fi

      - name: List files in repository root
        run: |
          echo "List File"
          ls -la

      - name: Update version.properties
        run: |
          echo "The created branch is ${{ env.BRANCH_NAME }}"
          echo "The version name is ${{ env.VERSION_NAME }}"
          VERSION_FILE="version.properties"
          echo "Updating version in $VERSION_FILE to ${{ env.VERSION_NAME }}"
          sed -i "s/versionName=.*/versionName=${{ env.VERSION_NAME }}/" $VERSION_FILE
          
          VERSION_CODE=$(($(grep -oP '^versionCode=\K\d+' $VERSION_FILE) + 1))
          sed -i "s/^versionCode=.*/versionCode=$VERSION_CODE/" $VERSION_FILE
          cat $VERSION_FILE

      - name: Commit & Push version changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add version.properties
          git tag "v${{ env.VERSION_NAME }}"
          git commit -m "Update version to ${{ env.VERSION_NAME }}"
          git push --follow-tags